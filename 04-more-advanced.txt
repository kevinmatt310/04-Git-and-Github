1. git revert
   This command creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history).
   If a commit has been made somewhere in the project's history, and you later decide that the commit is wrong and should not have been done, then git revert is the tool for the job. It will undo the changes introduced by the bad commit, recording the "undo" in the history.

   git reset
   This command is a little more complicated. It actually does a couple of different things depending on how it is invoked. It modifies the index (the so-called "staging area"). Or it changes which commit a branch head is currently pointing at.
   This command may alter existing history (by changing the commit that a branch references).
   If you have made a commit, but haven't shared it with anyone else and you decide you don't want it, then you can use git reset to rewrite the history so that it looks as though you never made that commit.
2. -If you want to see the history completely same as it happened, you should use merge. Merge preserves history whereas rebase rewrites it.-
   -Merging adds a new commit to your history
   -Rebasing is better to streamline a complex history, you are able to change the commit history by interactive rebase
3. git stash pop throws away the (topmost, by default) stash after applying it, whereas git stash apply leaves it in the stash list for possible later reuse (or you can then git stash drop it).
4. Interactive rebasing can be used for changing commits in many ways such as editing, deleting, and squashing